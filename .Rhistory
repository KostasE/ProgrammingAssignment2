?solve
iv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinverse <- function(inverse) iv <- inverse
getinverse <- function() iv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x$get()
iv <- solve(data)
x$setmean(iv)
iv
## Return a matrix that is the inverse of 'x'
}
a<-makeCacheMatrix(matrix(data = 1:4, nrow =2 ncol =2))
a<-makeCacheMatrix(matrix(data = 1:4, nrow =2, ncol =2))
a
cacheSolve(a)
cacheSolve(matrix(data = 1:4, nrow = 2, ncol = 2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinverse <- function(inverse) iv <- inverse
getinverse <- function() iv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
iv <- x[getinverse()]
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x[get()]
iv <- solve(data)
x[setmean(iv)]
iv
## Return a matrix that is the inverse of 'x'
}
a<-matrix(data = 1:4, ncol = 2, nrow = 2)
a
solve(a)
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-c(1:4)
b <- cachemean(a)
b <- cachemean()
b <- cacheSolve(a)
b <- cachemean(a)
b <- makeVector(a)
c <- cachemean(a)
c <- cachemean(b)
c
b
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinverse <- function(inverse) iv <- inverse
getinverse <- function() iv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
iv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinverse <- function(inverse) iv <- inverse
getinverse <- function() iv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
a<-matrix(1:4, 2, 2)
b <- makeCacheMatrix(a)
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x[get()]
iv <- solve(data)
x[setmean(iv)]
iv
}
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x[get()]
iv <- solve(data)
x[setmean(iv)]
iv
}
c <- cacheSolve(b)
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x$get()
iv <- solve(data)
x[setmean(iv)]
iv
}
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x$get()
iv <- solve(data)
x[setmean(iv)]
iv
}
c <- cacheSolve(b)
cacheSolve <- function(x, ...) {
iv <- x$getinverse()
if(!is.null(iv)) {
message("Getting cached data")
return(m)
}
data <- x$get()
iv <- solve(data)
x$setinverse(iv)
iv
}
c <- cacheSolve(b)
c
c <- cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
